# Builder stage for compiling the Yew application
FROM rust:alpine AS builder
# Install build dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache musl-dev libffi-dev zlib-dev jpeg-dev
# Install wasm target and build tools
RUN rustup target add wasm32-unknown-unknown && \
    cargo install wasm-bindgen-cli
RUN apk update && apk upgrade
# Add the Edge Community repository
RUN echo "@edge http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories
# Update the package index
RUN apk update
# Install the desired package from the edge community repository
RUN apk add trunk@edge
# Add application files to the builder stage
COPY ./web/Cargo.lock ./web/Cargo.toml ./web/dev-info.md ./web/index.html ./web/tailwind.config.js ./web/Trunk.toml /app/
COPY ./web/src /app/src
COPY ./web/static /app/static
WORKDIR /app
# Initialize trunk first
RUN cd /tmp && \
    echo "" > dummy.rs && \
    trunk build dummy.rs || true
RUN cargo install --locked wasm-bindgen-cli
# Build the Yew application in release mode
RUN RUSTFLAGS="--cfg=web_sys_unstable_apis --cfg getrandom_backend=\"wasm_js\"" trunk build --features server_build --release

# Go builder stage for the gpodder API
FROM golang:alpine AS go-builder
WORKDIR /gpodder-api

# Install build dependencies
RUN apk add --no-cache git

# Copy go module files first for better layer caching
COPY ./gpodder-api/go.mod ./gpodder-api/go.sum ./
RUN go mod download

# Copy the rest of the source code
COPY ./gpodder-api/cmd ./cmd
COPY ./gpodder-api/config ./config
COPY ./gpodder-api/internal ./internal

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -o gpodder-api ./cmd/server/

# Final stage for setting up runtime environment
FROM alpine
# Metadata
LABEL maintainer="Collin Pendleton <collinp@collinpendleton.com>"

# Install runtime dependencies and build deps in one layer
RUN apk update && apk upgrade && \
    apk add --no-cache nginx tzdata python3 openssl bash mariadb-client curl cronie openrc ffmpeg supervisor \
    gcc musl-dev python3-dev python3 && \
    python3 -m venv /opt/venv && \
    /opt/venv/bin/pip install --upgrade pip && \
    rm -rf /var/cache/apk/*
ENV TZ=UTC
# Set environment variables
ENV PATH="/opt/venv/bin:$PATH"
ENV APP_ROOT=/pinepods

# Copy and install requirements
COPY requirements.txt /tmp/
RUN pip install --no-cache-dir -r /tmp/requirements.txt && \
    rm -rf /root/.cache/pip/* && \
    apk del gcc musl-dev python3-dev

# Copy wait-for-it script
COPY wait-for-it/wait-for-it.sh /wait-for-it.sh
RUN chmod +x /wait-for-it.sh

# Copy built files from the builder stage
COPY --from=builder /app/dist /var/www/html/

# Copy Go API binary from the go-builder stage
COPY --from=go-builder /gpodder-api/gpodder-api /usr/local/bin/

# Set up application directories and files
WORKDIR /
COPY startup/startup.sh /startup.sh
RUN chmod +x /startup.sh

RUN mkdir -p /pinepods /var/log/supervisor/
COPY startup/ /pinepods/startup/
COPY clients/ /pinepods/clients/
COPY database_functions/ /pinepods/database_functions/
RUN chmod +x /pinepods/startup/call_refresh_endpoint.sh \
    /pinepods/startup/app_startup.sh \
    /pinepods/startup/call_nightly_tasks.sh \
    /pinepods/startup/startup.sh

# Clean things up
RUN rm -rf \
        /var/cache/apk/* \
        /root/.cache \
        /tmp/* \
        /var/tmp/* \
        /usr/share/man \
        /usr/share/doc

# Define and set the version
ARG PINEPODS_VERSION
RUN echo "${PINEPODS_VERSION}" > /pinepods/current_version

RUN cp /usr/share/zoneinfo/UTC /etc/localtime && \
    echo "UTC" > /etc/timezone

# Configure Nginx
COPY startup/nginx.conf /etc/nginx/nginx.conf

ENTRYPOINT ["bash", "/startup.sh"]
